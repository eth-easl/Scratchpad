FROM nvcr.io/nvidia/pytorch:24.09-py3 AS base

LABEL org.opencontainers.image.source=https://github.com/xiaozheyao/Scratchpad
LABEL org.opencontainers.image.description="Scratchpad: Adaptive Serving of LMs"
LABEL org.opencontainers.image.licenses=Apache-2.0
LABEL org.opencontainers.image.architecture=amd64


# --- Builder Stage ---
FROM base AS builder

ENV DEBIAN_FRONTEND=noninteractive
ENV TRITEIA_COMPUTE_CAP=80
ENV TORCH_CUDA_ARCH_LIST="8.0 8.6 9.0 9.0a"
ENV FLASHINFER_ENABLE_AOT="1"

WORKDIR /build

# Install build dependencies
RUN apt update && apt upgrade -y && \
    pip install setuptools==75.6.0 packaging==23.2 ninja==1.11.1.3 build==1.2.2.post1 nvidia-cublas-cu12 uv

# Build flashinfer
# This step's cache depends on changes to the patch files.
COPY ./.buildcache/patches/flashinfer /tmp/flashinfer-patches
RUN git clone -b v0.2.3 https://github.com/flashinfer-ai/flashinfer.git --recursive && \
    cd flashinfer && \
    # Apply patches if any exist, then remove the temp patch directory
    (find /tmp/flashinfer-patches -maxdepth 1 -type f -print0 | xargs -0 -r git apply || true) && \
    FLASHINFER_ENABLE_AOT=1 pip wheel --no-build-isolation --verbose . -w /wheels && \
    rm -rf /tmp/flashinfer-patches

# Build triteia
# This step's cache depends on changes to the patch files and the state of the triteia git repository's default branch.
# For more stable caching, consider cloning a specific tag or commit of triteia if available.
COPY ./.buildcache/patches/triteia /tmp/triteia-patches
RUN git clone https://github.com/eth-easl/triteia.git && \
    cd triteia && \
    git submodule update --init --recursive && \
    # Apply patches if any exist, then remove the temp patch directory
    (find /tmp/triteia-patches -maxdepth 1 -type f -print0 | xargs -0 -r git apply || true) && \
    pip wheel . -w /wheels && \
    rm -rf /tmp/triteia-patches

# Build scratchpad
# Optimized to rebuild only if pyproject.toml or the scratchpad/ directory contents change.
WORKDIR /build/scratchpad_src # Use a dedicated directory for scratchpad sources
COPY pyproject.toml .
COPY scratchpad ./scratchpad
# If your wheel build depends on other files (e.g., README.md for package description, MANIFEST.in),
# COPY them here explicitly. For example:
# COPY README.md .
RUN pip wheel . -w /wheels

# --- Final Stage ---
FROM base AS final

WORKDIR /

# Copy built wheels from builder stage
COPY --from=builder /wheels /wheels

# Install wheels
RUN pip install /wheels/*.whl

# Install runtime dependencies
COPY . /scratchpad
WORKDIR /scratchpad
RUN pip install -r meta/requirements-extra.txt
RUN pip install -r meta/requirements-dev.txt

# Uninstall pynvml if necessary (it might be a dependency of something else now)
RUN pip uninstall pynvml -y
